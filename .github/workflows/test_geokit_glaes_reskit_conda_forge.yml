name: Run combined tests for geokit, glaes and reskit 
on: 
  workflow_dispatch:
    inputs:
      tags:
        description: 'Manual run' 
  push:
    branches: 
      - main

  # Allows to trigger the workflow manually
    
  
jobs:
    TestCombinedInstalaltions:
        name: Test on ${{ matrix.os }})
        runs-on: ${{ matrix.os }}
        strategy:
            fail-fast: true
            matrix:
                # os: ["ubuntu-latest","ubuntu-20.04", "macos-latest","macos-13","macos-12", "macos-11","windows-latest","windows-2019"]
                os: ["self-hosted"]
        steps:
            - uses: conda-incubator/setup-miniconda@v3
              with:
                miniforge-version: latest
                channels: conda-forge
                activate-environment: test_env
            - name: Install libraries
              shell: pwsh
              id: install-step
              run: |
                    ls
                    echo "LS Done"
                    mamba create -v -n test_env -c conda-forge -c nodefaults fine geokit glaes reskit
                    echo "Installation done"
                    mamba list -n test_env
                    echo "libaries printed"
            - name: Get geokit version
              shell: pwsh
              id: geokit-version
              run: |
                  $GEOKIT_STRING = mamba list -e -n test_env geokit | Out-String
                  echo the geokit string is $GEOKIT_STRING
                  $GEOKIT_VERSION = [regex]::Match($GEOKIT_STRING, 'geokit=(\d+\.\d+\.\d+)=').Groups[1].Value 
                  echo "GEOKIT_VERSION_NUMBER=$GEOKIT_VERSION" >> $GITHUB_OUTPUT
                  echo $GEOKIT_VERSION_NUMBER
                  echo "GEOKIT_VERSION_NUMBER_WITH_V=v$GEOKIT_VERSION" >> $GITHUB_OUTPUT
                  echo $GEOKIT_VERSION_NUMBER_WITH_V
            - name: Get reskit version
              shell: pwsh
              id: reskit-version
              run: |
                  $RESKIT_STRING = mamba list -e -n test_env reskit | Out-String
                  echo the reskit string is $RESKIT_STRING
                  $RESKIT_VERSION = [regex]::Match($RESKIT_STRING, 'reskit=(\d+\.\d+\.\d+)=').Groups[1].Value 
                  echo "RESKIT_VERSION_NUMBER=$RESKIT_VERSION" >> $GITHUB_OUTPUT
                  echo $RESKIT_VERSION_NUMBER
                  echo "RESKIT_VERSION_NUMBER_WITH_V=v$RESKIT_VERSION" >> $GITHUB_OUTPUT
                  echo $RESKIT_VERSION_NUMBER_WITH_V
            - name: Get glaes version
              shell: pwsh
              id: glaes-version
              run: |
                  $GLAES_STRING = mamba list -e -n test_env glaes | Out-String
                  echo the glaes string is $GLAES_STRING
                  $GLAES_VERSION = [regex]::Match($GLAES_STRING, 'glaes=(\d+\.\d+\.\d+)=').Groups[1].Value 
                  echo "GLAES_VERSION_NUMBER=$GLAES_VERSION" >> $GITHUB_OUTPUT
                  echo $GLAES_VERSION_NUMBER
                  echo "GLAES_VERSION_NUMBER_WITH_V=v$GLAES_VERSION" >> $GITHUB_OUTPUT
                  echo $GLAES_VERSION_NUMBER_WITH_V
            # - name: Get fine version
            # - name: Get fine version
            #   shell: pwsh
            #   id: fine-version
            #   run: |
            #     $FINE_STRING = mamba list -e -n test_env fine | Out-String
            #     echo the fine string is $FINE_STRING
            #     $FINE_VERSION = [regex]::Match($FINE_STRING, 'fine=(\d+\.\d+\.\d+)=').Groups[1].Value 
            #     echo "FINE_VERSION_NUMBER=$FINE_VERSION" >> $GITHUB_OUTPUT
            #     echo $FINE_VERSION_NUMBER
            #     echo "FINE_VERSION_NUMBER_WITH_V=v$FINE_VERSION" >> $GITHUB_OUTPUT
            #     echo $FINE_VERSION_NUMBER_WITH_V
            # - name: Get fine version
            #   shell: pwsh
            #   id: other-version
            #   run: |
            #       $GEOKIT_STRING = mamba list -e -n test_env geokit | Out-String
            #       echo The geokit string is $GEOKIT_STRING
            #       $GEOKIT_VERSION = [regex]::Match($GEOKIT_STRING, 'geokit=(\d+\.\d+\.\d+)=').Groups[1].Value 
            #       echo "GEOKIT_VERSION=$GEOKIT_VERSION" >> $GITHUB_OUTPUT
            #       echo Geokit version: $GEOKIT_VERSION

            #       $GLAES_STRING = mamba list -e -n test_env geokit | Out-String
            #       echo The glaes string is $GLAES_STRING
            #       $GLAES_VERSION = [regex]::Match($GLAES_STRING, 'glaes=(\d+\.\d+\.\d+)=').Groups[1].Value 
            #       echo "GLAES_VERSION=$GLAES_VERSION" >> $GITHUB_OUTPUT
            #       echo Glaes Version: $GLAES_VERSION 
                  

            - name: Checkout geokit
              uses: actions/checkout@v4
              with:
                repository: FZJ-IEK3-VSA/geokit
                path: './geokit'
                ref: ${{ steps.geokit-version.outputs.GEOKIT_VERSION_NUMBER_WITH_V }}
                fetch-depth: 0 
            - name: Checkout Reskit
              uses: actions/checkout@v4
              with:
                repository: FZJ-IEK3-VSA/RESKit
                path: './reskit' 
                ref: ${{ steps.reskit-version.outputs.RESKIT_VERSION_NUMBER_WITH_V }}
                fetch-depth: 0     
            - name: Checkout glaes
              uses: actions/checkout@v4
              with:
                repository: FZJ-IEK3-VSA/glaes
                path: './glaes'
                ref: ${{ steps.glaes-version.outputs.RESKIT_VERSION_NUMBER_WITH_V }}
                fetch-depth: 0 
            - name: Run pytest for geokit
              shell: pwsh
              run: |
                    echo "Start ls"
                    ls
                    echo "ls terminated"
                    cd geokit
                    echo "start pytest"
                    mamba run -n test_env python -m pytest
                    echo "Pytest done"

            - name: Run pytest for glaes
              shell: pwsh
              run: |
                    echo "Start ls"
                    ls
                    echo "ls terminated"
                    cd glaes
                    echo "start pytest"
                    mamba run -n test_env python -m pytest
                    echo "Pytest done"

                    
